#!/usr/bin/env perl -w
#
#Author: Christy Peterson
#Made: 20130527
#Last Edited: 20131104
#
#
#Purpose: To batch extract mlst profiles from a folder containing fasta files genome
#
#Requires: folder containing properly formatted blast+ databases of all 7 loci, as generated by mlstdb.pl script & a folder containing fasta genome files of all genomes to have MLST ST's determined

use strict;
use warnings;
use Bio::SearchIO;

# get command-line arguments, or die with useage statement
my $useage  = "perl mlst_insilico.pl <genome folder> <DB folder>\n";
my $directory      = shift or die $useage;
my $db_dir  = shift or die $useage;

# read directory into an array
opendir (D, "$directory") || die "Can't opendir $directory: $!\n";
my @list = grep /\.fasta$/, readdir(D);
closedir(D);

# generate output for batched genomes
my $final_out   = "batch_results.txt";
open (OUT, ">", "$final_out");
close (OUT);

#go through array
foreach my $file (@list)
{
    #obtain genome of interest from file name
    my $genome  = substr($file, 0, -6);
    
    #set up the line for this genome's profile in the batch results file
    open (BATCH, ">>$final_out");
    print BATCH $genome."\t";

    #set up allele hash containing all allele proper names and base length
    my %loci_hash  = (
    abcZ    => "537",
    bglA    => "399",
    cat     => "486",
    dapE    => "462",
    dat     => "471",
    ldh     => "453",
    lhkA    => "480",
    );
    #to sort the hash alphabetically
    my @keys    = keys %loci_hash;
    my @sorted = sort {$a cmp $b} @keys;

    #generate output for unique genome
    my $folder  = $directory.$genome."_results";
    my $dir_cmd = "mkdir $folder";
    system $dir_cmd;

    my $out = $folder."/".$genome."_MLST.report";
    open (FILE, ">$out");
    close (FILE);

    &printline;

    #loop through sorted array to search genome for all 7 loci in alphabetical order
    foreach my $loci (@sorted)
    {
        #inform user that the script is searching for alleles
        print "Searching for $loci allele in $genome\n";
    
        #set up variables to get blast+ input
        my $db      = $db_dir.$loci."_DB";
        my $blast   = $folder."/".$genome."-".$loci.".blast";
        my $in  = $directory.$file;
    
        #run blast
        my $blast_cmd   = "blastn -query $in -db $db -out $blast";
        system $blast_cmd;
    
        #parsing blast results
        my $parse = Bio::SearchIO->new(-file=>$blast);
    
        #loop through all the blast results
        while(my $result = $parse->next_result)
        {
            while(my $hit = $result->next_hit)
            {
                while(my $hsp = $hit->next_hsp)
                {
                    # must have 100% identity match and the hsp length must equal that loci's base pair count (as compared to the alleles.txt file)
                    if($hsp->percent_identity==100 and $hsp->length==$loci_hash{$loci})
                    {
                        # writes the hit into the output file
                        open(MYFILE,">>$out");
                        print MYFILE $genome . " aligns to " . $hit->name . " \n";
                        close (MYFILE);
                        
                        #split the hit into loci name and allele number into an array
                        my @allele_result   = split (/-/,$hit->name);
                        
                        # writes allele number into the batch output file
                        print BATCH $allele_result[1]."\t";
                    }
                }
            }
        }
    }
    print "! Done !\n";
    &printline;
    
    #finish the line with a newline character
    print BATCH "\n";
   
}

close (BATCH);

sub printline
{
    print "-------------------------------------------\n";
}

exit;